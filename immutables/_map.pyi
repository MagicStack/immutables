from typing import Mapping, TypeVar, Any, Hashable, Iterator, Union

K = TypeVar('K', bound=Hashable)
V = TypeVar('V', bound=Any)
D = TypeVar('D', bound=Any)


class Map(Mapping[K, V]):
    def __init__(self, col: Any, **kw: Any): ...
    def __len__(self) -> int: ...
    def set(self, key: K, val: V) -> Map[K, V]: ...
    def delete(self, key: K) -> Map[K, V]: ...
    def get(self, key: K, default: D = None) -> Union[V, D]: ...
    def __getitem__(self, key: K) -> V: ...
    def __contains__(self, key: object) -> bool: ...
    def __iter__(self) -> Iterator[K]: ...
